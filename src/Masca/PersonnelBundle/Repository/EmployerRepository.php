<?php

namespace Masca\PersonnelBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * EmployerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmployerRepository extends \Doctrine\ORM\EntityRepository
{
    public function getEmployers($nbParPage, $page) {
        if($page < 1) {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur: "'.$page.'").');
        }

        $query = $this->createQueryBuilder('employer')
            ->orderBy('employer.id', 'DESC')
            ->getQuery();

        $query->setFirstResult(($page-1) * $nbParPage)->setMaxResults($nbParPage);
        return new Paginator($query);
    }

    public function findEmployer($nbParPage, $page, $keyword) {
        if($page < 1) {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur: "'.$page.'").');
        }

        $query = $this->createQueryBuilder('employer')
            ->leftJoin('employer.person','person')
            ->where('person.nom like :nom')->setParameter('nom','%'.$keyword.'%')
            ->orWhere('person.prenom like :prenom')->setParameter('prenom', '%'.$keyword.'%')
            ->orWhere('person.numMatricule like :matr')->setParameter('matr', '%'.$keyword.'%')
            ->orderBy('employer.id', 'DESC')
            ->getQuery();

        $query->setFirstResult(($page-1) * $nbParPage)->setMaxResults($nbParPage);
        return new Paginator($query);
    }
}
